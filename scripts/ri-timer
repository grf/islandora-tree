#!/usr/bin/env ruby

# TODO: examine risearch in catalina output for other common params (what is dt? stream?)
# TODO: list user options in timing output
# TODO: large queries overrun the network buffer - use something other than Net::HTTP to do a streaming read,

STDOUT.sync = true

Kernel.trap('INT')  { STDERR.puts "Interrupt"    ; exit -2 }
Kernel.trap('HUP')  { STDERR.puts "Hangup"       ; exit -3 }
Kernel.trap('PIPE') { STDERR.puts "Pipe Closed"  ; exit -4 }

DEBUG = false

require 'rubygems'
require 'ostruct'
require 'optparse'
require 'net/http'
require 'uri'
require 'cgi'
require 'timeout'

# http://islandorap.fcla.edu:8080/fedora/risearch?type=tuples&flush=true&format=count&lang=sparql&

def default_boolean(bool, name)
  return (bool ? '--' : '--no-')  + name
end


def parse_command_line(args)

  # what does :flush do? does :stream have an effect?

 config = OpenStruct.new(:url     => 'http://localhost:8080/fedora/risearch',  # the RDF endpoint
                          :lang    => 'sparql',  # one of 'sparql', 'itql'
                          :format  => 'csv',     # one of 'count', 'csv', 'tsv', 'sparql', 'simple'
                          :limit   => '',        # number or blank
                          :list    => true,      # provide returned data
                          :number  => 1,         # number of runs
                          :scripts => [],        # the scripts to time
                          :verbose => true,      # currently, prints the error message on failure
                          :stdin   => false
                         )

  opts = OptionParser.new do |opt|
    opt.banner = "\n" +
                 "Usage: ri-time [ options ] input-filename [ more input-filenamess ]\n\n" +
                 "Run the resource index query using input-file, displays 'time', 'count',\n" +
                 "for each file ('time' in milliseconds, 'count' the number of lines returned\n" +
                 "by the query.  If a single '-' is provided instead of a file name, use STDIN\n" +
                 "to read the query.\n\n" +
                 "Will optionally print the lines of the query repsonse.\n\n" +
                 "Note: if the filenames end in '.itql' or '.sparql', those values will be used\n" +
                 "and will override the --language option. When --format=count, then the query's \n" +
                 "return value will printed out for 'count' (--list has no effect in this case).\n\n"

    opt.on_tail("  ")

    opt.on("--language LANG",   String,  "Language of RI query (sparql, itql) defaults to '#{config.lang}'")  do |lang|
      config.lang = lang
    end

    opt.on("--format VALUE",    String,  "Response format, one of 'csv', 'tsv', 'sparql', 'simple', 'count' - defaults to '#{config.format}'")  do |format|
      config.format = format
    end

    opt.on("--number N",        String,  "The number of times to run each test script, defaults to #{config.number}")  do |n|
      config.number = n.to_i
    end

    opt.on("--url URL",         String,  "The RI search URL, defaults to '#{config.url}'")  do |url|
      config.url = url
    end

    opt.on("--limit N",         String, "The number of results to return, defaults to #{config.limit == '' ? '\'unlimited\'' : config.limit}") do |n|
      if n == ''
        config.limit = ''
      else
        config.limit = n.to_i
      end
    end

    opt.on("--[no-]list",       "Flag indicates we should display responses (see --format), defaults to #{default_boolean(config.list, 'list')}")  do |flag|
      config.list = flag
    end

    opt.on("--[no-]verbose",    "Flag indicates we should display error messages, etc, defaults to #{default_boolean(config.verbose, 'verbose')}")  do |flag|
      config.verbose = flag
    end

  end
  opts.parse!(args)

  unless (config.lang.downcase == 'sparql' or config.lang.downcase == 'itql')
    raise "The --language option must be one of 'sparql' or 'itql'"
  end

  unless ([ 'count', 'csv', 'simple', 'sparql', 'tsv' ].include? config.format.downcase)
    raise "The --format option must be one of 'sparql', 'simple', 'tsv', 'count' or 'csv'"
  end

  unless (config.number > 0)
    raise "The --number option must be greater than or equal to 1"
  end

  if (config.limit != '' and config.limit < 1)
    raise "The --limit option must be greater than or equal to 1, was '#{config.limit}'"
  end

  if args.length == 1 && args[0] == '-'
    config.stdin = true
    return config
  end

  args.each do |file|
    if not File.exists? file
      STDERR.puts "File #{file} doesn't exist: skipping."
      next
    end
    if not File.readable? file
      STDERR.puts "File #{file} isn't readable: skipping."
      next
    end
    config.scripts.push file
  end

  raise "No valid query script files supplied." if config.scripts.empty?

rescue => e
  STDERR.puts e, opts
  exit -1
else
  return config
end


class RI

  def initialize(config)
    @lang = config.lang
    @format = config.format
    @limit = config.limit
    @url = config.url.gsub(/\+$/, '') + '/'
    @server = URI.parse(config.url)
    @http = Net::HTTP.new(@server.host, @server.port)
    @http.read_timeout = 999999
    @path = @server.path
  end

  # what does flush do?  should we use "stream" => "on" as well? instead?

  def params(overrides = {})
    params = { "stream"   => "on",
               "flush"    => "true",
               "lang"     => @lang,
               "type"     => "tuples",
               "format"   => @format,
               "limit"    => @limit }.merge overrides.delete_if { |k,v| v.nil? or v.empty? }

    return params.map { |k,v| "#{k}=#{v}" }
  end

  # overrides would be something like  ob.query(text,  "lang" => "itql", ...)

  def query(text, overrides)
    qt = { "query" => CGI.escape(text) }
    query_string = params(overrides.merge(qt)).join('&')
    yield @http.request_get(@path + '?' + query_string)
  end
end

def cleanup_line(line)
  return line.strip.sub(/^#.*/, '')
end

def read_stdin
  text = []
  while (line = STDIN.gets) do
    text.push(cleanup_line(line))
  end
  return text.delete_if { |line| line.nil? or line.empty? }.join(' ')
end

def read_file(filename)
  text = []
  File.read(filename).split("\n").each do |line|
    text.push(cleanup_line(line))
  end
  return text.delete_if { |line| line.nil? or line.empty? }.join(' ')
end

def language_from_extension(filename)
  return case filename
         when /\.itql$/i;    'itql'
         when /\.sparql$/i;  'sparql'
         end
end

def run(ri, config, filename=nil)

  if config.stdin
    query_text = read_stdin
    lang = nil
  else
    query_text = read_file(filename)
    lang = language_from_extension(filename)
  end

  config.number.times do
    start_time = Time.now
    ri.query(query_text, 'lang' => lang) do |response|
      if response.code != '200'
        STDOUT.puts "Error, response #{response.code} #{response.message}"
        STDOUT.puts response.body if config.verbose
      else
        data = response.body
        if config.format == 'count'
          puts sprintf("%10.2f    %s    %s", (Time.now - start_time)*1000, data, filename)
        else
          puts sprintf("%10.2f    %s    %s", (Time.now - start_time)*1000, data.split("\n").count.to_i - 1, filename)
          puts data if config.list
        end
      end
    end
  end
end

config = parse_command_line(ARGV)
ri = RI.new(config)

if config.stdin
  run(ri, config)
else
  config.scripts.each do |filename|
    run(ri, config, filename)
  end
end
